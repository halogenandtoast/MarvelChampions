{
  "marvel-core/library/Marvel/Treachery/Treacheries/*.hs": {
    "type": "treachery",
    "alternate": "marvel-core/tests/Marvel/Treachery/Cards/{}Spec.hs",
    "template": [
      "module Marvel.Treachery.Treacheries.{dot}",
      "  ( {dot|snakecase|camelcase}",
      "  , {dot}(..)",
      "  )",
      "where",
      "",
      "import Marvel.Prelude",
      "",
      "import Marvel.Card.Code",
      "import Marvel.Entity",
      "import Marvel.Message",
      "import Marvel.Source",
      "import Marvel.Target",
      "import Marvel.Treachery.Attrs",
      "import Marvel.Treachery.Cards qualified as Cards",
      "",
      "{dot|snakecase|camelcase} :: TreacheryCard {dot}",
      "{dot|snakecase|camelcase} = treachery {dot} Cards.{dot|snakecase|camelcase}",
      "",
      "newtype {dot} = {dot} TreacheryAttrs",
      "  deriving anyclass IsTreachery",
      "  deriving newtype (Show, Eq, ToJSON, FromJSON, HasCardCode, Entity, IsSource, IsTarget)",
      "",
      "instance RunMessage {dot} where",
      "  runMessage msg ({dot} attrs) =",
      "    {dot} <$> runMessage msg attrs"
    ]
  },
  "marvel-core/library/Marvel/Attachment/Attachments/*.hs": {
    "type": "attachment",
    "alternate": "marvel-core/tests/Marvel/Attachment/Attachments/{}Spec.hs",
    "template": [
      "module Marvel.Attachment.Attachments.{dot}",
      "  ( {dot|snakecase|camelcase}",
      "  , {dot}(..)",
      "  )",
      "where",
      "",
      "import Marvel.Prelude",
      "",
      "import Marvel.Attachment.Attrs",
      "import Marvel.Attachment.Cards qualified as Cards",
      "import Marvel.Card.Code",
      "import Marvel.Entity",
      "import Marvel.Message",
      "import Marvel.Source",
      "import Marvel.Target",
      "",
      "{dot|snakecase|camelcase} :: AttachmentCard {dot}",
      "{dot|snakecase|camelcase} = attachment {dot} Cards.{dot|snakecase|camelcase}",
      "",
      "newtype {dot} = {dot} AttachmentAttrs",
      "  deriving anyclass IsAttachment",
      "  deriving newtype (Show, Eq, ToJSON, FromJSON, HasCardCode, Entity, IsSource, IsTarget)",
      "",
      "instance RunMessage {dot} where",
      "  runMessage msg ({dot} attrs) =",
      "    {dot} <$> runMessage msg attrs"
    ]
  },
  "marvel-core/library/Marvel/Minion/Minions/*.hs": {
    "type": "minion",
    "alternate": "marvel-core/tests/Marvel/Minion/Minions/{}Spec.hs",
    "template": [
      "module Marvel.Minion.Minions.{dot}",
      "  ( {dot|snakecase|camelcase}",
      "  , {dot}(..)",
      "  )",
      "where",
      "",
      "import Marvel.Prelude",
      "",
      "import Marvel.Card.Code",
      "import Marvel.Entity",
      "import Marvel.Hp",
      "import Marvel.Message",
      "import Marvel.Minion.Attrs",
      "import Marvel.Minion.Cards qualified as Cards",
      "import Marvel.Source",
      "import Marvel.Stats",
      "import Marvel.Target",
      "",
      "{dot|snakecase|camelcase} :: MinionCard {dot}",
      "{dot|snakecase|camelcase} = minion {dot} Cards.{dot|snakecase|camelcase} (Sch 0) (Atk 0) (HP 1)",
      "",
      "newtype {dot} = {dot} MinionAttrs",
      "  deriving anyclass IsMinion",
      "  deriving newtype (Show, Eq, ToJSON, FromJSON, HasCardCode, Entity, IsSource, IsTarget)",
      "",
      "instance RunMessage {dot} where",
      "  runMessage msg ({dot} attrs) =",
      "    {dot} <$> runMessage msg attrs"
    ]
  },
  "marvel-core/library/Marvel/SideScheme/SideSchemes/*.hs": {
    "type": "sideScheme",
    "alternate": "marvel-core/tests/Marvel/SideScheme/SideSchemes/{}Spec.hs",
    "template": [
      "module Marvel.SideScheme.SideSchemes.{dot}",
      "  ( {dot|snakecase|camelcase}",
      "  , {dot}(..)",
      "  )",
      "where",
      "",
      "import Marvel.Prelude",
      "",
      "import Marvel.Card.Code",
      "import Marvel.Entity",
      "import Marvel.Message",
      "import Marvel.SideScheme.Attrs",
      "import Marvel.SideScheme.Cards qualified as Cards",
      "import Marvel.Source",
      "import Marvel.Target",
      "",
      "{dot|snakecase|camelcase} :: SideSchemeCard {dot}",
      "{dot|snakecase|camelcase} = sideScheme {dot} Cards.{dot|snakecase|camelcase}",
      "",
      "newtype {dot} = {dot} SideSchemeAttrs",
      "  deriving anyclass IsSideScheme",
      "  deriving newtype (Show, Eq, ToJSON, FromJSON, HasCardCode, Entity, IsSource, IsTarget)",
      "",
      "instance RunMessage {dot} where",
      "  runMessage msg ({dot} attrs) =",
      "    {dot} <$> runMessage msg attrs"
    ]
  },
  "marvel-core/library/Marvel/Upgrade/Upgrades/*.hs": {
    "type": "upgrade",
    "alternate": "marvel-core/tests/Marvel/Upgrade/Upgrades/{}Spec.hs",
    "template": [
      "module Marvel.Upgrade.Upgrades.{dot}",
      "  ( {dot|snakecase|camelcase}",
      "  , {dot}(..)",
      "  )",
      "where",
      "",
      "import Marvel.Prelude",
      "",
      "import Marvel.Ability",
      "import Marvel.Card.Code",
      "import Marvel.Entity",
      "import Marvel.Message",
      "import Marvel.Source",
      "import Marvel.Target",
      "import Marvel.Upgrade.Attrs",
      "import Marvel.Upgrade.Cards qualified as Cards",
      "",
      "{dot|snakecase|camelcase} :: UpgradeCard {dot}",
      "{dot|snakecase|camelcase} = upgrade {dot} Cards.{dot|snakecase|camelcase}",
      "",
      "newtype {dot} = {dot} UpgradeAttrs",
      "  deriving anyclass IsUpgrade",
      "  deriving newtype (Show, Eq, ToJSON, FromJSON, HasCardCode, Entity, IsSource, IsTarget)",
      "",
      "instance HasAbilities {dot} where",
      "  getAbilities _ = []",
      "",
      "instance RunMessage {dot} where",
      "  runMessage msg ({dot} attrs) =",
      "    {dot} <$> runMessage msg attrs"
    ]
  },
  "marvel-core/library/Marvel/Event/Events/*.hs": {
    "type": "event",
    "alternate": "marvel-core/tests/Marvel/Event/Events/{}Spec.hs",
    "template": [
      "module Marvel.Event.Events.{dot}",
      "  ( {dot|snakecase|camelcase}",
      "  , {dot}(..)",
      "  )",
      "where",
      "",
      "import Marvel.Prelude",
      "",
      "import Marvel.Card.Code",
      "import Marvel.Entity",
      "import Marvel.Message",
      "import Marvel.Queue",
      "import Marvel.Source",
      "import Marvel.Target",
      "import Marvel.Event.Attrs",
      "import Marvel.Event.Cards qualified as Cards",
      "",
      "{dot|snakecase|camelcase} :: EventCard {dot}",
      "{dot|snakecase|camelcase} = event {dot} Cards.{dot|snakecase|camelcase}",
      "",
      "newtype {dot} = {dot} EventAttrs",
      "  deriving anyclass IsEvent",
      "  deriving newtype (Show, Eq, ToJSON, FromJSON, HasCardCode, Entity, IsSource, IsTarget)",
      "",
      "instance RunMessage {dot} where",
      "  runMessage msg e@({dot} attrs) = case msg of",
      "    EventMessage eid msg' | eid == toId e -> case msg' of",
      "      PlayedEvent identityId _ _ -> do",
      "        pure e",
      "      _ -> {dot} <$> runMessage msg attrs",
      "    _ -> {dot} <$> runMessage msg attrs"
    ]
  },
  "marvel-core/library/Marvel/Ally/Allies/*.hs": {
    "type": "ally",
    "alternate": "marvel-core/tests/Marvel/Ally/Allies/{}Spec.hs",
    "template": [
      "module Marvel.Ally.Allies.{dot}",
      "  ( {dot|snakecase|camelcase}",
      "  , {dot}(..)",
      "  )",
      "where",
      "",
      "import Marvel.Prelude",
      "",
      "import Marvel.Ability",
      "import Marvel.Ally.Attrs",
      "import Marvel.Ally.Cards qualified as Cards",
      "import Marvel.Card.Code",
      "import Marvel.Entity",
      "import Marvel.Hp",
      "import Marvel.Message",
      "import Marvel.Source",
      "import Marvel.Stats",
      "import Marvel.Target",
      "",
      "{dot|snakecase|camelcase} :: AllyCard {dot}",
      "{dot|snakecase|camelcase} = ally {dot} Cards.{dot|snakecase|camelcase} (Thw 1, 1) (Atk 1, 1) (HP 1)",
      "",
      "newtype {dot} = {dot} AllyAttrs",
      "  deriving anyclass IsAlly",
      "  deriving newtype (Show, Eq, ToJSON, FromJSON, HasCardCode, Entity, IsSource, IsTarget)",
      "",
      "instance HasAbilities {dot} where",
      "  getAbilities _ = []",
      "",
      "instance RunMessage {dot} where",
      "  runMessage msg ({dot} attrs) =",
      "    {dot} <$> runMessage msg attrs"
    ]
  }
}
